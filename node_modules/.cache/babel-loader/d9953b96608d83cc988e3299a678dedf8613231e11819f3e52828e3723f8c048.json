{"ast":null,"code":"var _jsxFileName = \"/Users/omthakkar/Documents/ReactJs/dzap/dzap-test/src/components/Content.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Content() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [errorMessages, setErrorMessages] = useState([]);\n  const [duplicates, setDuplicates] = useState([]);\n  const [mergedInput, setMergedInput] = useState('');\n  const [selectedDuplicate, setSelectedDuplicate] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [lines, setLines] = useState([]);\n  const checkError = e => {\n    e.preventDefault();\n    const linesArray = inputText.split('\\n');\n    const errors = [];\n    const duplicateAddresses = {};\n    linesArray.forEach((line, index) => {\n      const parts = line.trim().split(/[,:= ]+/);\n      if (parts.length !== 2) {\n        errors.push(`Line ${index + 1} does not have exactly two parts.`);\n      } else {\n        const [address, value] = parts;\n        if (!isValidEthereumAddress(address)) {\n          errors.push(`Line ${index + 1} contains an invalid Ethereum address.`);\n        }\n        if (!/^\\d+$/.test(value)) {\n          errors.push(`Line ${index + 1} contains a non-numeric value.`);\n        }\n        if (duplicateAddresses[address]) {\n          duplicateAddresses[address].push(index);\n        } else {\n          duplicateAddresses[address] = [index];\n        }\n      }\n    });\n    const duplicatesFound = Object.values(duplicateAddresses).filter(indexes => indexes.length > 1);\n    setDuplicates(duplicatesFound);\n    setErrorMessages(errors);\n    setLines(linesArray);\n  };\n  const mergeDuplicates = e => {\n    e.preventDefault();\n    const linesToMerge = lines;\n    const mergedValuesMap = {};\n    linesToMerge.forEach(line => {\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address, value] = parts;\n      if (mergedValuesMap[address]) {\n        mergedValuesMap[address] += parseInt(value, 10);\n      } else {\n        mergedValuesMap[address] = parseInt(value, 10);\n      }\n    });\n    const mergedInputLines = Object.entries(mergedValuesMap).map(([address, value]) => {\n      return `${address} ${value}`;\n    });\n    const mergedInputText = mergedInputLines.join('\\n');\n    setInputText(mergedInputText);\n    setMergedInput(mergedInputText);\n  };\n  const handleMergeOption = shouldMerge => {\n    if (shouldMerge) {\n      mergeDuplicates();\n    } else {\n      const firstOccurrences = [];\n      const remainingLines = lines.filter((line, index) => {\n        if (!duplicates[selectedDuplicate].includes(index)) {\n          firstOccurrences.push(line);\n          return false;\n        }\n        return true;\n      });\n      const mergedInputText = firstOccurrences.concat(remainingLines).join('\\n');\n      setInputText(mergedInputText);\n      setMergedInput(mergedInputText);\n    }\n    setIsModalOpen(false);\n  };\n  const openModal = index => {\n    setSelectedDuplicate(index);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setSelectedDuplicate(null);\n    setIsModalOpen(false);\n  };\n  const isValidEthereumAddress = address => {\n    const ethereumAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n    return ethereumAddressRegex.test(address);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container py-2\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"exampleFormControlTextarea1\",\n          className: \"form-label\",\n          children: \"Addresses with Amounts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control bg-light text-emphasis-dark\",\n          rows: \"9\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Separated by ',' or ' ' or '='\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-grid gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: checkError,\n          children: \"Check Errors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success\",\n          onClick: mergeDuplicates,\n          children: \"Merge Duplicates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: errorMessages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Errors found:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: errorMessages.map((errorMessage, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: errorMessage\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), duplicates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Duplicate addresses found:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.map((indexes, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Address: \", lines[indexes[0]], \" - Duplicates: \", indexes.map(i => lines[i]).join(', '), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => openModal(index),\n              children: \"Merge\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), mergedInput && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Merged Input:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control bg-light text-emphasis-dark\",\n          rows: \"9\",\n          value: mergedInput,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        onRequestClose: closeModal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Duplicate Address Found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Do you want to merge the duplicates or keep the first occurrence?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMergeOption(true),\n          children: \"Merge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMergeOption(false),\n          children: \"Keep First Occurrence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(Content, \"NXW/hY/l/6mJ4DyFjQx8lTGO2SI=\");\n_c = Content;\nexport default Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","useState","Modal","jsxDEV","_jsxDEV","Content","_s","inputText","setInputText","errorMessages","setErrorMessages","duplicates","setDuplicates","mergedInput","setMergedInput","selectedDuplicate","setSelectedDuplicate","isModalOpen","setIsModalOpen","lines","setLines","checkError","e","preventDefault","linesArray","split","errors","duplicateAddresses","forEach","line","index","parts","trim","length","push","address","value","isValidEthereumAddress","test","duplicatesFound","Object","values","filter","indexes","mergeDuplicates","linesToMerge","mergedValuesMap","parseInt","mergedInputLines","entries","map","mergedInputText","join","handleMergeOption","shouldMerge","firstOccurrences","remainingLines","includes","concat","openModal","closeModal","ethereumAddressRegex","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","rows","onChange","target","type","onClick","errorMessage","i","readOnly","isOpen","onRequestClose","_c","$RefreshReg$"],"sources":["/Users/omthakkar/Documents/ReactJs/dzap/dzap-test/src/components/Content.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Modal from 'react-modal';\n\nfunction Content() {\n  const [inputText, setInputText] = useState('');\n  const [errorMessages, setErrorMessages] = useState([]);\n  const [duplicates, setDuplicates] = useState([]);\n  const [mergedInput, setMergedInput] = useState('');\n  const [selectedDuplicate, setSelectedDuplicate] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [lines, setLines] = useState([]);\n\n  const checkError = (e) => {\n    e.preventDefault();\n\n    const linesArray = inputText.split('\\n');\n    const errors = [];\n    const duplicateAddresses = {};\n\n    linesArray.forEach((line, index) => {\n      const parts = line.trim().split(/[,:= ]+/);\n      if (parts.length !== 2) {\n        errors.push(`Line ${index + 1} does not have exactly two parts.`);\n      } else {\n        const [address, value] = parts;\n        if (!isValidEthereumAddress(address)) {\n          errors.push(`Line ${index + 1} contains an invalid Ethereum address.`);\n        }\n        if (!/^\\d+$/.test(value)) {\n          errors.push(`Line ${index + 1} contains a non-numeric value.`);\n        }\n        if (duplicateAddresses[address]) {\n          duplicateAddresses[address].push(index);\n        } else {\n          duplicateAddresses[address] = [index];\n        }\n      }\n    });\n\n    const duplicatesFound = Object.values(duplicateAddresses).filter((indexes) => indexes.length > 1);\n\n    setDuplicates(duplicatesFound);\n    setErrorMessages(errors);\n    setLines(linesArray);\n  };\n\n  const mergeDuplicates = (e) => {\n    e.preventDefault()\n    const linesToMerge = lines;\n    const mergedValuesMap = {};\n\n    linesToMerge.forEach((line) => {\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address, value] = parts;\n\n      if (mergedValuesMap[address]) {\n        mergedValuesMap[address] += parseInt(value, 10);\n      } else {\n        mergedValuesMap[address] = parseInt(value, 10);\n      }\n    });\n\n    const mergedInputLines = Object.entries(mergedValuesMap).map(([address, value]) => {\n      return `${address} ${value}`;\n    });\n\n    const mergedInputText = mergedInputLines.join('\\n');\n    setInputText(mergedInputText);\n    setMergedInput(mergedInputText);\n  };\n\n  const handleMergeOption = (shouldMerge) => {\n    if (shouldMerge) {\n      mergeDuplicates();\n    } else {\n      const firstOccurrences = [];\n      const remainingLines = lines.filter((line, index) => {\n        if (!duplicates[selectedDuplicate].includes(index)) {\n          firstOccurrences.push(line);\n          return false;\n        }\n        return true;\n      });\n\n      const mergedInputText = firstOccurrences.concat(remainingLines).join('\\n');\n      setInputText(mergedInputText);\n      setMergedInput(mergedInputText);\n    }\n    setIsModalOpen(false);\n  };\n\n  const openModal = (index) => {\n    setSelectedDuplicate(index);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setSelectedDuplicate(null);\n    setIsModalOpen(false);\n  };\n\n  const isValidEthereumAddress = (address) => {\n    const ethereumAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n    return ethereumAddressRegex.test(address);\n  };\n\n  return (\n    <div className=\"container py-2\">\n      <form>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">Addresses with Amounts</label>\n          <textarea\n            className=\"form-control bg-light text-emphasis-dark\"\n            rows=\"9\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n          ></textarea>\n        </div>\n\n        <div className='mb-3'>\n          <p>Separated by ',' or ' ' or '='</p>\n        </div>\n\n        <div className=\"d-grid gap-2\">\n          <button type=\"button\" className='btn btn-primary' onClick={checkError}>Check Errors</button>\n          <button type=\"button\" className='btn btn-success' onClick={mergeDuplicates}>Merge Duplicates</button>\n        </div>\n\n        <div>\n          {errorMessages.length > 0 && (\n            <div>\n              <p>Errors found:</p>\n              <ul>\n                {errorMessages.map((errorMessage, index) => (\n                  <li key={index}>{errorMessage}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        {duplicates.length > 0 && (\n          <div>\n            <p>Duplicate addresses found:</p>\n            <ul>\n              {duplicates.map((indexes, index) => (\n                <li key={index}>\n                  Address: {lines[indexes[0]]} - Duplicates: {indexes.map((i) => lines[i]).join(', ')}\n                  <button onClick={() => openModal(index)}>Merge</button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {mergedInput && (\n          <div>\n            <p>Merged Input:</p>\n            <textarea\n              className=\"form-control bg-light text-emphasis-dark\"\n              rows=\"9\"\n              value={mergedInput}\n              readOnly\n            ></textarea>\n          </div>\n        )}\n\n        <Modal isOpen={isModalOpen} onRequestClose={closeModal}>\n          <h2>Duplicate Address Found</h2>\n          <p>Do you want to merge the duplicates or keep the first occurrence?</p>\n          <button onClick={() => handleMergeOption(true)}>Merge</button>\n          <button onClick={() => handleMergeOption(false)}>Keep First Occurrence</button>\n        </Modal>\n      </form>\n    </div>\n  );\n}\n\nexport default Content;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}