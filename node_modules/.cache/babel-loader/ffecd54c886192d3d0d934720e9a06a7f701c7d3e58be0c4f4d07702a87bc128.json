{"ast":null,"code":"var _jsxFileName = \"/Users/omthakkar/Documents/ReactJs/dzap/dzap-test/src/components/Content.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Modal from 'react-modal'; // Import the modal library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Content() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [errorMessages, setErrorMessages] = useState([]);\n  const [duplicates, setDuplicates] = useState([]);\n  const [mergedInput, setMergedInput] = useState('');\n  const [selectedDuplicate, setSelectedDuplicate] = useState(null); // Track the selected duplicate\n  const [isModalOpen, setIsModalOpen] = useState(false); // Modal state\n\n  const checkError = e => {\n    e.preventDefault();\n    const lines = inputText.split('\\n');\n    const errors = [];\n    const duplicateAddresses = {};\n    lines.forEach((line, index) => {\n      const parts = line.trim().split(/[,:= ]+/);\n      if (parts.length !== 2) {\n        errors.push(`Line ${index + 1} does not have exactly two parts.`);\n      } else {\n        const [address, value] = parts;\n        if (!isValidEthereumAddress(address)) {\n          errors.push(`Line ${index + 1} contains an invalid Ethereum address.`);\n        }\n        if (!/^\\d+$/.test(value)) {\n          errors.push(`Line ${index + 1} contains a non-numeric value.`);\n        }\n        if (duplicateAddresses[address]) {\n          duplicateAddresses[address].push(index);\n        } else {\n          duplicateAddresses[address] = [index];\n        }\n      }\n    });\n    const duplicatesFound = Object.values(duplicateAddresses).filter(indexes => indexes.length > 1);\n    setDuplicates(duplicatesFound);\n    setErrorMessages(errors);\n  };\n  const mergeDuplicates = () => {\n    const lines = inputText.split('\\n');\n    const mergedValuesMap = {};\n    lines.forEach((line, index) => {\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address, value] = parts;\n      if (mergedValuesMap[address]) {\n        mergedValuesMap[address] += parseInt(value, 10);\n      } else {\n        mergedValuesMap[address] = parseInt(value, 10);\n      }\n    });\n    const mergedInputLines = Object.entries(mergedValuesMap).map(([address, value]) => {\n      return `${address} ${value}`;\n    });\n    const mergedInputText = mergedInputLines.join('\\n');\n    setMergedInput(mergedInputText);\n  };\n  const handleMergeOption = shouldMerge => {\n    if (shouldMerge) {\n      mergeDuplicates();\n    } else {\n      // If the user chooses not to merge, keep the first occurrence\n      // Set the merged input to the original input\n      setMergedInput(inputText);\n    }\n    setIsModalOpen(false); // Close the modal\n  };\n\n  const openModal = index => {\n    setSelectedDuplicate(index);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setSelectedDuplicate(null);\n    setIsModalOpen(false);\n  };\n  const isValidEthereumAddress = address => {\n    const ethereumAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n    return ethereumAddressRegex.test(address);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container py-2\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"exampleFormControlTextarea1\",\n          className: \"form-label\",\n          children: \"Addresses with Amounts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control bg-light text-emphasis-dark\",\n          rows: \"9\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Separated by ',' or ' ' or '='\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-grid gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: checkError,\n          children: \"Check Errors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success\",\n          onClick: mergeDuplicates,\n          children: \"Merge Duplicates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: errorMessages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Errors found:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: errorMessages.map((errorMessage, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: errorMessage\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), duplicates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Duplicate addresses found:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.map((indexes, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Address: \", lines[indexes[0]], \" - Duplicates: \", indexes.map(i => lines[i]).join(', '), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => openModal(index),\n              children: \"Merge\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), mergedInput && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Merged Input:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control bg-light text-emphasis-dark\",\n          rows: \"9\",\n          value: mergedInput,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        onRequestClose: closeModal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Duplicate Address Found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Do you want to merge the duplicates or keep the first occurrence?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMergeOption(true),\n          children: \"Merge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMergeOption(false),\n          children: \"Keep First Occurrence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(Content, \"IJ/6Adv19o9Hw+oxgKwIr/bIzJo=\");\n_c = Content;\nexport default Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","useState","Modal","jsxDEV","_jsxDEV","Content","_s","inputText","setInputText","errorMessages","setErrorMessages","duplicates","setDuplicates","mergedInput","setMergedInput","selectedDuplicate","setSelectedDuplicate","isModalOpen","setIsModalOpen","checkError","e","preventDefault","lines","split","errors","duplicateAddresses","forEach","line","index","parts","trim","length","push","address","value","isValidEthereumAddress","test","duplicatesFound","Object","values","filter","indexes","mergeDuplicates","mergedValuesMap","parseInt","mergedInputLines","entries","map","mergedInputText","join","handleMergeOption","shouldMerge","openModal","closeModal","ethereumAddressRegex","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","rows","onChange","target","type","onClick","errorMessage","i","readOnly","isOpen","onRequestClose","_c","$RefreshReg$"],"sources":["/Users/omthakkar/Documents/ReactJs/dzap/dzap-test/src/components/Content.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Modal from 'react-modal'; // Import the modal library\n\nfunction Content() {\n  const [inputText, setInputText] = useState('');\n  const [errorMessages, setErrorMessages] = useState([]);\n  const [duplicates, setDuplicates] = useState([]);\n  const [mergedInput, setMergedInput] = useState('');\n  const [selectedDuplicate, setSelectedDuplicate] = useState(null); // Track the selected duplicate\n  const [isModalOpen, setIsModalOpen] = useState(false); // Modal state\n\n  const checkError = (e) => {\n    e.preventDefault();\n\n    const lines = inputText.split('\\n');\n    const errors = [];\n    const duplicateAddresses = {};\n\n    lines.forEach((line, index) => {\n      const parts = line.trim().split(/[,:= ]+/);\n      if (parts.length !== 2) {\n        errors.push(`Line ${index + 1} does not have exactly two parts.`);\n      } else {\n        const [address, value] = parts;\n        if (!isValidEthereumAddress(address)) {\n          errors.push(`Line ${index + 1} contains an invalid Ethereum address.`);\n        }\n        if (!/^\\d+$/.test(value)) {\n          errors.push(`Line ${index + 1} contains a non-numeric value.`);\n        }\n        if (duplicateAddresses[address]) {\n          duplicateAddresses[address].push(index);\n        } else {\n          duplicateAddresses[address] = [index];\n        }\n      }\n    });\n\n    const duplicatesFound = Object.values(duplicateAddresses).filter((indexes) => indexes.length > 1);\n\n    setDuplicates(duplicatesFound);\n    setErrorMessages(errors);\n  };\n\n  const mergeDuplicates = () => {\n    const lines = inputText.split('\\n');\n    const mergedValuesMap = {};\n\n    lines.forEach((line, index) => {\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address, value] = parts;\n\n      if (mergedValuesMap[address]) {\n        mergedValuesMap[address] += parseInt(value, 10);\n      } else {\n        mergedValuesMap[address] = parseInt(value, 10);\n      }\n    });\n\n    const mergedInputLines = Object.entries(mergedValuesMap).map(([address, value]) => {\n      return `${address} ${value}`;\n    });\n\n    const mergedInputText = mergedInputLines.join('\\n');\n    setMergedInput(mergedInputText);\n  };\n\n  const handleMergeOption = (shouldMerge) => {\n    if (shouldMerge) {\n      mergeDuplicates();\n    } else {\n      // If the user chooses not to merge, keep the first occurrence\n      // Set the merged input to the original input\n      setMergedInput(inputText);\n    }\n    setIsModalOpen(false); // Close the modal\n  };\n\n  const openModal = (index) => {\n    setSelectedDuplicate(index);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setSelectedDuplicate(null);\n    setIsModalOpen(false);\n  };\n\n  const isValidEthereumAddress = (address) => {\n    const ethereumAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n    return ethereumAddressRegex.test(address);\n  };\n\n  return (\n    <div className=\"container py-2\">\n      <form>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">Addresses with Amounts</label>\n          <textarea\n            className=\"form-control bg-light text-emphasis-dark\"\n            rows=\"9\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n          ></textarea>\n        </div>\n\n        <div className='mb-3'>\n          <p>Separated by ',' or ' ' or '='</p>\n        </div>\n\n        <div className=\"d-grid gap-2\">\n          <button type=\"button\" className='btn btn-primary' onClick={checkError}>Check Errors</button>\n          <button type=\"button\" className='btn btn-success' onClick={mergeDuplicates}>Merge Duplicates</button>\n        </div>\n\n        <div>\n          {errorMessages.length > 0 && (\n            <div>\n              <p>Errors found:</p>\n              <ul>\n                {errorMessages.map((errorMessage, index) => (\n                  <li key={index}>{errorMessage}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        {duplicates.length > 0 && (\n          <div>\n            <p>Duplicate addresses found:</p>\n            <ul>\n              {duplicates.map((indexes, index) => (\n                <li key={index}>\n                  Address: {lines[indexes[0]]} - Duplicates: {indexes.map((i) => lines[i]).join(', ')}\n                  <button onClick={() => openModal(index)}>Merge</button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {mergedInput && (\n          <div>\n            <p>Merged Input:</p>\n            <textarea\n              className=\"form-control bg-light text-emphasis-dark\"\n              rows=\"9\"\n              value={mergedInput}\n              readOnly\n            ></textarea>\n          </div>\n        )}\n\n        {/* Modal for user choice */}\n        <Modal isOpen={isModalOpen} onRequestClose={closeModal}>\n          <h2>Duplicate Address Found</h2>\n          <p>Do you want to merge the duplicates or keep the first occurrence?</p>\n          <button onClick={() => handleMergeOption(true)}>Merge</button>\n          <button onClick={() => handleMergeOption(false)}>Keep First Occurrence</button>\n        </Modal>\n      </form>\n    </div>\n  )\n}\n\nexport default Content;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}