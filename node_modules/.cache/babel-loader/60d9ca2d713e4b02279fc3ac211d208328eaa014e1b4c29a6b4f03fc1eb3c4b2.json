{"ast":null,"code":"var _jsxFileName = \"/Users/omthakkar/Documents/ReactJs/dzap/dzap-test/src/components/Content.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Content() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [errorMessages, setErrorMessages] = useState([]);\n  const [duplicateAddressLines, setDuplicateAddressLines] = useState([]);\n  const handleInputChange = e => {\n    const text = e.target.value;\n    setInputText(text);\n    setLineNumbers(text.split('\\n').map((_, index) => index + 1));\n  };\n  const CombineBalances = () => {\n    const lines = inputText.split('\\n');\n    const mergedValuesMap = {};\n    lines.forEach(line => {\n      if (line.trim() === '') {\n        return;\n      }\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address, value] = parts;\n      if (mergedValuesMap[address]) {\n        mergedValuesMap[address] += parseInt(value, 10);\n      } else {\n        mergedValuesMap[address] = parseInt(value, 10);\n      }\n    });\n    const mergedInputLines = Object.entries(mergedValuesMap).map(([address, value]) => {\n      return `${address} ${value}`;\n    });\n    const mergedInputText = mergedInputLines.join('\\n');\n\n    // Update the inputText with the merged input\n    setInputText(mergedInputText);\n\n    // Clear the duplicateAddressLines and errorMessages\n    setDuplicateAddressLines([]);\n    setErrorMessages([]);\n  };\n  const keepFirst = () => {\n    const lines = inputText.split('\\n');\n    const filteredLines = [];\n    const seenAddresses = new Set();\n    lines.forEach((line, index) => {\n      if (line.trim() === '') {\n        return;\n      }\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address] = parts;\n      if (!seenAddresses.has(address)) {\n        filteredLines.push(line);\n        seenAddresses.add(address);\n      }\n    });\n\n    // Update the inputText with the filtered lines\n    setInputText(filteredLines.join('\\n'));\n\n    // Clear the duplicateAddressLines and errorMessages\n    setDuplicateAddressLines([]);\n    setErrorMessages([]);\n  };\n\n  // Function to validate Ethereum address (basic check for hexadecimal string)\n  const isValidEthereumAddress = address => {\n    const ethereumAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n    return ethereumAddressRegex.test(address);\n  };\n  const findDuplicateAddressLines = array => {\n    const addressToLinesMap = new Map();\n    const duplicateAddresses = new Map();\n    array.forEach((item, index) => {\n      const parts = item.split(' ');\n      const address = parts[0];\n      if (addressToLinesMap.has(address)) {\n        const lines = addressToLinesMap.get(address);\n        lines.push(index);\n        addressToLinesMap.set(address, lines);\n\n        // Store the duplicate address and its lines\n        if (!duplicateAddresses.has(address)) {\n          duplicateAddresses.set(address, lines);\n        }\n      } else {\n        addressToLinesMap.set(address, [index]);\n      }\n    });\n\n    // Convert the duplicateAddresses Map to an array of objects\n    const duplicateAddressLines = Array.from(duplicateAddresses, ([address, lines]) => ({\n      address,\n      lines\n    }));\n    console.log('Duplicate addresses found:');\n    duplicateAddressLines.forEach(({\n      address,\n      lines\n    }) => {\n      console.log(`Address: ${address} - Lines: ${lines.join(', ')}`);\n    });\n    return duplicateAddressLines;\n  };\n  const checkError = e => {\n    e.preventDefault();\n    const lines = inputText.split('\\n');\n    const errors = [];\n    lines.forEach((line, index) => {\n      if (line.trim() === '') {\n        return;\n      }\n      const parts = line.trim().split(/[,:= ]+/); // Split by colons, commas, spaces, or equal signs\n      if (parts.length !== 2) {\n        errors.push(`Line ${index + 1} does not have exactly two parts.`);\n      } else {\n        const [address, value] = parts;\n        if (!isValidEthereumAddress(address)) {\n          errors.push(`Line ${index + 1} contains an invalid Ethereum address.`);\n        }\n        if (!/^\\d+$/.test(value)) {\n          errors.push(`Line ${index + 1} contains a non-numeric value.`);\n        }\n      }\n    });\n    const duplicateLines = findDuplicateAddressLines(lines);\n    setDuplicateAddressLines(duplicateLines);\n    setErrorMessages(errors);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container py-2\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line-numbers\",\n        children: lineNumbers.map(lineNumber => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"line-number\",\n          children: lineNumber\n        }, lineNumber, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control bg-light text-emphasis-dark\",\n        rows: \"9\",\n        value: inputText,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Separated by ',' or ' ' or '='\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), errorMessages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex border border-danger rounded-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            width: \"16\",\n            height: \"16\",\n            fill: \"red\",\n            className: \"bi bi-exclamation-circle\",\n            viewBox: \"0 0 16 16\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-danger p-2\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"p-1\",\n            children: errorMessages.map((errorMessage, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"list-group-item\",\n              children: errorMessage\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), duplicateAddressLines.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3 row justify-content-between container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex text-danger  \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-danger d-flex\",\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Duplicated\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex  col-md-3 ms-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"px-2\",\n              onClick: keepFirst,\n              children: \"Keep the first one\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 10\n            }, this), \"|\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"px-2\",\n              onClick: CombineBalances,\n              children: \"Combine Balances\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex border border-danger rounded-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-4\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              width: \"16\",\n              height: \"16\",\n              fill: \"red\",\n              class: \"bi bi-exclamation-circle\",\n              viewBox: \"0 0 16 16\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-danger p-1\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: duplicateAddressLines.map(({\n                address,\n                lines\n              }, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Address \", address, \" encountered duplicate on line: \", lines.map(lineNumber => lineNumber + 1).join(', ')]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 9\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-grid gap-2 py-2\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: checkError,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(Content, \"FABUv19hyfHnZoG4pvvVgUhU/H0=\");\n_c = Content;\nexport default Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Content","_s","inputText","setInputText","errorMessages","setErrorMessages","duplicateAddressLines","setDuplicateAddressLines","handleInputChange","e","text","target","value","setLineNumbers","split","map","_","index","CombineBalances","lines","mergedValuesMap","forEach","line","trim","parts","address","parseInt","mergedInputLines","Object","entries","mergedInputText","join","keepFirst","filteredLines","seenAddresses","Set","has","push","add","isValidEthereumAddress","ethereumAddressRegex","test","findDuplicateAddressLines","array","addressToLinesMap","Map","duplicateAddresses","item","get","set","Array","from","console","log","checkError","preventDefault","errors","length","duplicateLines","className","children","lineNumbers","lineNumber","fileName","_jsxFileName","columnNumber","rows","onChange","xmlns","width","height","fill","viewBox","d","errorMessage","onClick","class","_c","$RefreshReg$"],"sources":["/Users/omthakkar/Documents/ReactJs/dzap/dzap-test/src/components/Content.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction Content() {\n  const [inputText, setInputText] = useState('');\n  const [errorMessages, setErrorMessages] = useState([]);\n  const [duplicateAddressLines, setDuplicateAddressLines] = useState([]);\n  const handleInputChange = (e) => {\n    const text = e.target.value;\n    setInputText(text);\n    setLineNumbers(text.split('\\n').map((_, index) => index + 1));\n  };\n\n\n\n  const CombineBalances = () => {\n    const lines = inputText.split('\\n');\n    const mergedValuesMap = {};\n\n\n        \n  \n    lines.forEach((line) => {\n        if (line.trim() === '') {\n            return;\n          }\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address, value] = parts;\n  \n      if (mergedValuesMap[address]) {\n        mergedValuesMap[address] += parseInt(value, 10);\n      } else {\n        mergedValuesMap[address] = parseInt(value, 10);\n      }\n    });\n  \n    const mergedInputLines = Object.entries(mergedValuesMap).map(([address, value]) => {\n      return `${address} ${value}`;\n    });\n  \n    const mergedInputText = mergedInputLines.join('\\n');\n  \n    // Update the inputText with the merged input\n    setInputText(mergedInputText);\n  \n    // Clear the duplicateAddressLines and errorMessages\n    setDuplicateAddressLines([]);\n    setErrorMessages([]);\n  };\n\n\n  const keepFirst = () => {\n    const lines = inputText.split('\\n');\n    const filteredLines = [];\n    const seenAddresses = new Set();\n    \n\n        \n  \n    lines.forEach((line, index) => {\n        if (line.trim() === '') {\n            return;\n          }\n      const parts = line.trim().split(/[,:= ]+/);\n      const [address] = parts;\n  \n      if (!seenAddresses.has(address)) {\n        filteredLines.push(line);\n        seenAddresses.add(address);\n      }\n    });\n  \n    // Update the inputText with the filtered lines\n    setInputText(filteredLines.join('\\n'));\n  \n    // Clear the duplicateAddressLines and errorMessages\n    setDuplicateAddressLines([]);\n    setErrorMessages([]);\n  };\n\n  \n\n  // Function to validate Ethereum address (basic check for hexadecimal string)\n  const isValidEthereumAddress = (address) => {\n    const ethereumAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n    return ethereumAddressRegex.test(address);\n  };\n\n  const findDuplicateAddressLines = (array) => {\n    const addressToLinesMap = new Map();\n    const duplicateAddresses = new Map();\n  \n    array.forEach((item, index) => {\n      const parts = item.split(' ');\n      const address = parts[0];\n  \n      if (addressToLinesMap.has(address)) {\n        const lines = addressToLinesMap.get(address);\n        lines.push(index);\n        addressToLinesMap.set(address, lines);\n  \n        // Store the duplicate address and its lines\n        if (!duplicateAddresses.has(address)) {\n          duplicateAddresses.set(address, lines);\n        }\n      } else {\n        addressToLinesMap.set(address, [index]);\n      }\n    });\n  \n    // Convert the duplicateAddresses Map to an array of objects\n    const duplicateAddressLines = Array.from(duplicateAddresses, ([address, lines]) => ({ address, lines }));\n  \n    console.log('Duplicate addresses found:');\n    duplicateAddressLines.forEach(({ address, lines }) => {\n      console.log(`Address: ${address} - Lines: ${lines.join(', ')}`);\n    });\n  \n    return duplicateAddressLines;\n  };\n  \n\n  const checkError = (e) => {\n    e.preventDefault();\n    const lines = inputText.split('\\n');\n    const errors = [];\n\n    lines.forEach((line, index) => {\n        if (line.trim() === '') {\n            return;\n          }\n      const parts = line.trim().split(/[,:= ]+/); // Split by colons, commas, spaces, or equal signs\n      if (parts.length !== 2) {\n        errors.push(`Line ${index + 1} does not have exactly two parts.`);\n      } else {\n        const [address, value] = parts;\n        if (!isValidEthereumAddress(address)) {\n          errors.push(`Line ${index + 1} contains an invalid Ethereum address.`);\n        }\n        if (!/^\\d+$/.test(value)) {\n          errors.push(`Line ${index + 1} contains a non-numeric value.`);\n        }\n      }\n    });\n\n    const duplicateLines = findDuplicateAddressLines(lines);\n    setDuplicateAddressLines(duplicateLines);\n    setErrorMessages(errors);\n  };\n\n  return (\n    <div className=\"container py-2\">\n      <form>\n      <div className=\"line-numbers\">\n              {lineNumbers.map((lineNumber) => (\n                <div key={lineNumber} className=\"line-number\">{lineNumber}</div>\n              ))}\n            </div>\n            <textarea\n              className=\"form-control bg-light text-emphasis-dark\"\n              rows=\"9\"\n              value={inputText}\n              onChange={handleInputChange}\n            ></textarea>\n          \n\n        <div className='mb-3'>\n          <p>Separated by ',' or ' ' or '='</p>\n        </div>\n\n        {errorMessages.length > 0 && (\n          <div className='d-flex border border-danger rounded-2'>\n            <div className='p-2'>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"red\" className=\"bi bi-exclamation-circle\" viewBox=\"0 0 16 16\">\n                <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n                <path d=\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z\"/>\n              </svg>\n            </div>\n            <div className='text-danger p-2'>\n              <ul className='p-1'>\n                {errorMessages.map((errorMessage, index) => (\n                  <li className='list-group-item' key={index}>{errorMessage}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n\n        {duplicateAddressLines.length > 0 && (\n          <div className='mb-3 row justify-content-between container'>\n          <div className='d-flex text-danger  '>\n             <div className='text-danger d-flex'><strong>Duplicated</strong></div>\n        <div className='d-flex  col-md-3 ms-auto'> \n         <div className='px-2' onClick={keepFirst}>Keep the first one</div>\n         |\n        <div className='px-2' onClick={CombineBalances}>Combine Balances</div>\n        </div>\n            \n          </div>\n          <div className='d-flex border border-danger rounded-2'>\n            <div className='p-4'>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"red\" class=\"bi bi-exclamation-circle\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n      <path d=\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z\"/>\n    </svg>\n            </div>\n            <div className='text-danger p-1'>\n            <ul>\n      {duplicateAddressLines.map(({ address, lines }, index) => (\n        <li key={index}>\n          Address {address} encountered duplicate on line: {lines.map(lineNumber => lineNumber + 1).join(', ')}\n        </li>\n      ))}\n    </ul>\n            </div>\n          </div>\n        </div>\n        )}\n\n        <div className=\"d-grid gap-2 py-2\">\n          <button className='btn btn-primary' onClick={checkError}>Next</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Content;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}